assume cs:code,ds:data,ss:stack,es:extended

extended segment
	db 1024 dup (0)
extended ends

stack segment
	db 1024 dup (0)
stack ends

data segment
	_buff_p db 256 dup (24h)
	_buff_s db 256 dup (0)
	_msg_p db 0ah,'Output:',0
	_msg_s db 0ah,'Input:',0
data ends

code segment
start:	mov ax,extended
	mov es,ax
	mov ax,stack
	mov ss,ax
	mov sp,1024
	mov bp,sp
	mov ax,data
	mov ds,ax



_0:	MOV AX,left
	ADD AX,right
	MOV @0,AX
_1:	MOV AX,@0
	MOV DX,0
	MOV AX,2
	DIV BX
	MOV @1,AX
_2:	MOV AX,@1
	MOV t,AX
_3:	MOV AX,left
	MOV i,AX
_4:	MOV AX,right
	MOV j,AX
_5:	MOV AX,a~i
	MOV x,AX
_6:	MOV DX,1
	MOV AX,i
	CMP AX,j
	JB _LT_6
	MOV DX,0
_LT6:	MOV @2,DX
_7:	MOV AX,@2
	CMP AX,0
	JE _EZ_7
	JMP far ptr _9
_EZ_7:	NOP
_8:	JMP far ptr _54
_9:	MOV DX,1
	MOV AX,i
	CMP AX,j
	JB _LT_9
	MOV DX,0
_LT9:	MOV @3,DX
_10:	MOV AX,@3
	CMP AX,0
	JE _EZ_10
	JMP far ptr _12
_EZ_10:	NOP
_11:	JMP far ptr _41
_12:	MOV DX,1
	MOV AX,a~j
	CMP AX,x
	JNA _LE_12
	MOV DX,0
_LE_12:	MOV @4,DX
_13:	MOV DX,1
	MOV AX,j
	CMP AX,i
	JA _GT_13
	MOV DX,0
_GT_13:	MOV @5,DX
_15:	MOV AX,@6
	CMP AX,0
	JE _EZ_15
	JMP far ptr _17
_EZ_15:	NOP
_16:	JMP far ptr _19
_18:	JMP far ptr _12
_19:	MOV DX,1
	MOV AX,i
	CMP AX,j
	JB _LT_19
	MOV DX,0
_LT19:	MOV @8,DX
_20:	MOV AX,@8
	CMP AX,0
	JE _EZ_20
	JMP far ptr _22
_EZ_20:	NOP
_21:	JMP far ptr _26
_22:	MOV AX,a~j
	MOV temp,AX
_23:	MOV AX,a~i
	MOV a~j,AX
_24:	MOV AX,temp
	MOV a~i,AX
_26:	MOV DX,1
	MOV AX,a~i
	CMP AX,x
	JNB _GE_26
	MOV DX,0
_GE_26:	MOV @10,DX
_27:	MOV DX,1
	MOV AX,j
	CMP AX,i
	JA _GT_27
	MOV DX,0
_GT_27:	MOV @11,DX
_29:	MOV AX,@12
	CMP AX,0
	JE _EZ_29
	JMP far ptr _31
_EZ_29:	NOP
_30:	JMP far ptr _33
_32:	JMP far ptr _26
_33:	MOV DX,1
	MOV AX,i
	CMP AX,j
	JB _LT_33
	MOV DX,0
_LT33:	MOV @14,DX
_34:	MOV AX,@14
	CMP AX,0
	JE _EZ_34
	JMP far ptr _36
_EZ_34:	NOP
_35:	JMP far ptr _40
_36:	MOV AX,a~i
	MOV temp,AX
_37:	MOV AX,a~j
	MOV a~i,AX
_38:	MOV AX,temp
	MOV a~j,AX
_40:	JMP far ptr _9
_41:	MOV AX,x
	MOV a~j,AX
_42:	CALL quicksort
	MOV ,AX
_43:	MOV AX,left
	PUSH AX
_44:	MOV AX,j
	SUB AX,1
	MOV @17,AX
_45:	MOV AX,@17
	PUSH AX
_47:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
_48:	CALL quicksort
	MOV ,AX
_49:	MOV AX,j
	ADD AX,1
	MOV @19,AX
_50:	MOV AX,@19
	PUSH AX
_51:	MOV AX,right
	PUSH AX
_53:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
_54:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
_56:	CALL read
	MOV ,AX
_58:	MOV AX,@rt
	MOV SP,BP
	POP BP
	RET 
_59:	MOV AX,@rt
	MOV n,AX
_60:	MOV AX,0
	MOV i,AX
_61:	MOV DX,1
	MOV AX,i
	CMP AX,n
	JB _LT_61
	MOV DX,0
_LT61:	MOV @0,DX
_62:	MOV AX,@0
	CMP AX,0
	JE _EZ_62
	JMP far ptr _66
_EZ_62:	NOP
_63:	JMP far ptr _71
_65:	JMP far ptr _61
_66:	CALL read
	MOV ,AX
_68:	MOV AX,@rt
	MOV SP,BP
	POP BP
	RET 
_69:	MOV AX,@rt
	MOV a~i,AX
_70:	JMP far ptr _64
_71:	CALL quicksort
	MOV ,AX
_72:	MOV AX,0
	PUSH AX
_73:	MOV AX,n
	SUB AX,1
	MOV @4,AX
_74:	MOV AX,@4
	PUSH AX
_76:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
_77:	CALL write
	MOV ,AX
_78:	MOV AX,"快速排序结果："
	PUSH AX
_80:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
_81:	MOV AX,0
	MOV i,AX
_82:	MOV DX,1
	MOV AX,i
	CMP AX,n
	JB _LT_82
	MOV DX,0
_LT82:	MOV @0,DX
_83:	MOV AX,@0
	CMP AX,0
	JE _EZ_83
	JMP far ptr _87
_EZ_83:	NOP
_84:	JMP far ptr _96
_86:	JMP far ptr _82
_87:	CALL write
	MOV ,AX
_88:	MOV AX,a~i
	PUSH AX
_90:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
_91:	CALL write
	MOV ,AX
_92:	MOV AX,' '
	PUSH AX
_94:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
_95:	JMP far ptr _85
_96:	CALL write
	MOV ,AX
_97:	MOV AX,'
'
	PUSH AX
_99:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
_100:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
quit:	mov ah,4ch
	int 21h


read:	push bp
	mov bp,sp
	mov bx,offset _msg_s
	call _print
	mov bx,offset _buff_s
	mov di,0
_r_lp_1:	mov ah,1
	int 21h
	cmp al,0dh
	je _r_brk_1
	mov ds:[bx+di],al
	inc di
	jmp short _r_lp_1
_r_brk_1:	mov ah,2
	mov dl,0ah
	int 21h
	mov ax,0
	mov si,0
	mov cx,10
_r_lp_2:	mov dl,ds:[bx+si]
	cmp dl,30h
	jb _r_brk_2
	cmp dl,39h
	ja _r_brk_2
	sub dl,30h
	mov ds:[bx+si],dl
	mul cx
	mov dl,ds:[bx+si]
	mov dh,0
	add ax,dx
	inc si
	jmp short _r_lp_2
_r_brk_2:	mov cx,di
	mov si,0
_r_lp_3:	mov byte ptr ds:[bx+si],0
	loop _r_lp_3
	mov sp,bp
	pop bp
	ret

write:	push bp
	mov bp,sp
	mov bx,offset _msg_p
	call _print
	mov ax,ss:[bp+4]
	mov bx,10
	mov cx,0
_w_lp_1:	mov dx,0
	div bx
	push dx
	inc cx
	cmp ax,0
	jne _w_lp_1
	mov di ,offset _buff_p
_w_lp_2:	pop ax
	add ax,30h
	mov ds:[di],al
	inc di
	loop _w_lp_2
	mov dx,offset _buff_p
	mov ah,09h
	int 21h
	mov cx,di
	sub cx,offset _buff_p
	mov di,offset _buff_p
_w_lp_3:	mov al,24h
	mov ds:[di],al
	inc di
	loop _w_lp_3
	mov ax,di
	sub ax,offset _buff_p
	mov sp,bp
	pop bp
	ret 2
_print:	mov si,0
	mov di,offset _buff_p
_p_lp_1:	mov al,ds:[bx+si]
	cmp al,0
	je _p_brk_1
	mov ds:[di],al
	inc si
	inc di
	jmp short _p_lp_1
_p_brk_1:	mov dx,offset _buff_p
	mov ah,09h
	int 21h
	mov cx,si
	mov di,offset _buff_p
_p_lp_2:	mov al,24h
	mov ds:[di],al
	inc di
	loop _p_lp_2
	ret
code ends
end start