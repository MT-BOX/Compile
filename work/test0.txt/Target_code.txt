assume cs:code,ds:data,ss:stack,es:extended

extended segment
	db 1024 dup (0)
extended ends

stack segment
	db 1024 dup (0)
stack ends

data segment
	_buff_p db 256 dup (24h)
	_buff_s db 256 dup (0)
	_msg_p db 0ah,'Output:',0
	_msg_s db 0ah,'Input:',0
data ends

code segment
start:	mov ax,extended
	mov es,ax
	mov ax,stack
	mov ss,ax
	mov sp,1024
	mov bp,sp
	mov ax,data
	mov ds,ax



_0:	MOV AX,4
	MOV b,AX
_1:	MOV AX,0
	MOV i,AX
_2:	MOV AX,0
	MOV j,AX
_3:	MOV AX,b
	ADD AX,1
	MOV @0,AX
_4:	MOV DX,1
	MOV AX,i
	CMP AX,@0
	JB _LT_4
	MOV DX,0
_LT4:	MOV @1,DX
_5:	MOV AX,@1
	CMP AX,0
	JE _EZ_5
	JMP far ptr _7
_EZ_5:	NOP
_6:	JMP far ptr _14
_7:	CALL read
	MOV ,AX
_9:	MOV AX,@rt
	MOV SP,BP
	POP BP
	RET 
_10:	MOV AX,@rt
	MOV a~i,AX
_11:	MOV AX,i
	ADD AX,1
	MOV @3,AX
_12:	MOV AX,@3
	MOV i,AX
_13:	JMP far ptr _3
_14:	MOV AX,3
	MOV i,AX
_15:	MOV DX,1
	MOV AX,i
	CMP AX,0
	JNB _GE_15
	MOV DX,0
_GE_15:	MOV @4,DX
_16:	MOV AX,@4
	CMP AX,0
	JE _EZ_16
	JMP far ptr _21
_EZ_16:	NOP
_17:	JMP far ptr _38
_18:	MOV AX,i
	SUB AX,1
	MOV @5,AX
_19:	MOV AX,@5
	MOV i,AX
_20:	JMP far ptr _15
_21:	MOV AX,0
	MOV j,AX
_22:	MOV DX,1
	MOV AX,j
	CMP AX,i
	JNA _LE_22
	MOV DX,0
_LE_22:	MOV @6,DX
_23:	MOV AX,@6
	CMP AX,0
	JE _EZ_23
	JMP far ptr _28
_EZ_23:	NOP
_24:	JMP far ptr _37
_25:	MOV AX,j
	ADD AX,1
	MOV @7,AX
_26:	MOV AX,@7
	MOV j,AX
_27:	JMP far ptr _22
_28:	MOV AX,j
	ADD AX,1
	MOV @8,AX
_29:	MOV AX,@8
	MOV b,AX
_30:	MOV DX,1
	MOV AX,a~j
	CMP AX,a~b
	JA _GT_30
	MOV DX,0
_GT_30:	MOV @9,DX
_31:	MOV AX,@9
	CMP AX,0
	JE _EZ_31
	JMP far ptr _33
_EZ_31:	NOP
_32:	JMP far ptr _36
_33:	MOV AX,a~j
	MOV temp,AX
_34:	MOV AX,a~b
	MOV a~j,AX
_35:	MOV AX,temp
	MOV a~b,AX
_36:	JMP far ptr _25
_37:	JMP far ptr _18
_38:	CALL write
	MOV ,AX
_39:	MOV AX,"排序结果如下:"
	PUSH AX
_41:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
_42:	MOV AX,0
	MOV i,AX
_43:	MOV DX,1
	MOV AX,i
	CMP AX,5
	JB _LT_43
	MOV DX,0
_LT43:	MOV @11,DX
_44:	MOV AX,@11
	CMP AX,0
	JE _EZ_44
	JMP far ptr _48
_EZ_44:	NOP
_45:	JMP far ptr _57
_47:	JMP far ptr _43
_48:	CALL write
	MOV ,AX
_49:	MOV AX,a~i
	PUSH AX
_51:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
_52:	CALL write
	MOV ,AX
_53:	MOV AX,' '
	PUSH AX
_55:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
_56:	JMP far ptr _46
_57:	CALL write
	MOV ,AX
_58:	MOV AX,'
'
	PUSH AX
_60:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
_61:	MOV AX,
	MOV SP,BP
	POP BP
	RET 
quit:	mov ah,4ch
	int 21h


read:	push bp
	mov bp,sp
	mov bx,offset _msg_s
	call _print
	mov bx,offset _buff_s
	mov di,0
_r_lp_1:	mov ah,1
	int 21h
	cmp al,0dh
	je _r_brk_1
	mov ds:[bx+di],al
	inc di
	jmp short _r_lp_1
_r_brk_1:	mov ah,2
	mov dl,0ah
	int 21h
	mov ax,0
	mov si,0
	mov cx,10
_r_lp_2:	mov dl,ds:[bx+si]
	cmp dl,30h
	jb _r_brk_2
	cmp dl,39h
	ja _r_brk_2
	sub dl,30h
	mov ds:[bx+si],dl
	mul cx
	mov dl,ds:[bx+si]
	mov dh,0
	add ax,dx
	inc si
	jmp short _r_lp_2
_r_brk_2:	mov cx,di
	mov si,0
_r_lp_3:	mov byte ptr ds:[bx+si],0
	loop _r_lp_3
	mov sp,bp
	pop bp
	ret

write:	push bp
	mov bp,sp
	mov bx,offset _msg_p
	call _print
	mov ax,ss:[bp+4]
	mov bx,10
	mov cx,0
_w_lp_1:	mov dx,0
	div bx
	push dx
	inc cx
	cmp ax,0
	jne _w_lp_1
	mov di ,offset _buff_p
_w_lp_2:	pop ax
	add ax,30h
	mov ds:[di],al
	inc di
	loop _w_lp_2
	mov dx,offset _buff_p
	mov ah,09h
	int 21h
	mov cx,di
	sub cx,offset _buff_p
	mov di,offset _buff_p
_w_lp_3:	mov al,24h
	mov ds:[di],al
	inc di
	loop _w_lp_3
	mov ax,di
	sub ax,offset _buff_p
	mov sp,bp
	pop bp
	ret 2
_print:	mov si,0
	mov di,offset _buff_p
_p_lp_1:	mov al,ds:[bx+si]
	cmp al,0
	je _p_brk_1
	mov ds:[di],al
	inc si
	inc di
	jmp short _p_lp_1
_p_brk_1:	mov dx,offset _buff_p
	mov ah,09h
	int 21h
	mov cx,si
	mov di,offset _buff_p
_p_lp_2:	mov al,24h
	mov ds:[di],al
	inc di
	loop _p_lp_2
	ret
code ends
end start